=======================
jsons API documentation
=======================

**************
Main functions
**************

| **Function: dump**
|

+----------------+-------------------------------------------------------------------------------------------------------------------+
| *Function:*    | ``jsons.dump``                                                                                                    |
+----------------+-------------------------------------------------------------------------------------------------------------------+
| *Description:* | Serialize the given object to a JSON compatible type (e.g. dict, list, string, etc.)                              |
+----------------+-------------------------------+-----------------------------------------------------------------------------------+
| *Arguments:*   | ``obj: object``               | The object that is to be serialized.                                              |
+                +-------------------------------+-----------------------------------------------------------------------------------+
|                | ``cls: Optional[type]``       | If given, ``obj`` will be dumped as if it is of type ``type``.                    |
+                +-------------------------------+-----------------------------------------------------------------------------------+
|                | ``fork_inst: Optional[type]`` | If given, the serializer functions of this fork of ``JsonSerializable`` are used. |
+                +-------------------------------+-----------------------------------------------------------------------------------+
|                | ``kwargs``                    | Keyword arguments will be passed on to the serializer functions.                  |
+----------------+-------------------------------+-----------------------------------------------------------------------------------+
| *Returns:*     | ``object``                    | The serialized ``obj`` as a JSON type.                                            |
+----------------+-------------------------------+-----------------------------------------------------------------------------------+
| *Example:*     | ::                                                                                                                |
|                |                                                                                                                   |
|                |     >>> some_utcdate = datetime.now(tz=timezone.utc)                                                              |
|                |     >>> jsons.dump(some_utcdate)                                                                                  |
|                |     '2019-02-16T20:33:36Z'                                                                                        |
+----------------+-------------------------------------------------------------------------------------------------------------------+

|
|
| **Function: load**
|

+----------------+---------------------------------------------------------------------------------------------------------------------------------------------------+
| *Function:*    | ``jsons.load``                                                                                                                                    |
+----------------+---------------------------------------------------------------------------------------------------------------------------------------------------+
| *Description:* | Deserialize the given object to a Python equivalent type or an instance of type ``cls`` (if given).                                               |
+----------------+-------------------------------------------------------------+-------------------------------------------------------------------------------------+
| *Arguments:*   | ``json_obj: object``                                        | The object that is to be deserialized.                                              |
+                +-------------------------------------------------------------+-------------------------------------------------------------------------------------+
|                | ``cls: Optional[type]``                                     | A matching class of which an instance should be returned.                           |
+                +-------------------------------------------------------------+-------------------------------------------------------------------------------------+
|                | ``strict: bool``                                            | Determines strict mode (e.g. fail on partly deserialized objects).                  |
+                +-------------------------------------------------------------+-------------------------------------------------------------------------------------+
|                | ``fork_inst: Optional[type]``                               | If given, the deserializer functions of this fork of ``JsonSerializable`` are used. |
+                +-------------------------------------------------------------+-------------------------------------------------------------------------------------+
|                | ``attr_getters: Optional[Dict[str, Callable[[], object]]]`` | A dict that may hold callables that return values for certain attributes.           |
+                +-------------------------------------------------------------+-------------------------------------------------------------------------------------+
|                | ``kwargs``                                                  | Keyword arguments will be passed on to the deserializer functions.                  |
+----------------+-------------------------------------------------------------+-------------------------------------------------------------------------------------+
| *Returns:*     | ``object``                                                  | An object of a Python equivalent type or of ``cls``.                                |
+----------------+-------------------------------------------------------------+-------------------------------------------------------------------------------------+
| *Example:*     | ::                                                                                                                                                |
|                |                                                                                                                                                   |
|                |     >>> jsons.load('2019-02-16T20:33:36Z', datetime)                                                                                              |
|                |     datetime.datetime(2019, 2, 16, 20, 33, 36, tzinfo=datetime.timezone.utc)                                                                      |
+----------------+---------------------------------------------------------------------------------------------------------------------------------------------------+

|
|
| **Function: dumps**
|

+----------------+--------------------------------------------------------------------------------------------+
| *Function:*    | ``jsons.dumps``                                                                            |
+----------------+--------------------------------------------------------------------------------------------+
| *Description:* | Serialize the given object to a string.                                                    |
+----------------+------------------+-------------------------------------------------------------------------+
| *Arguments:*   | ``obj: object``  | The object that is to be stringified.                                   |
+                +------------------+-------------------------------------------------------------------------+
|                | ``jdkwargs``     | Extra keyword arguments for ``json.dumps`` (not ``jsons.dumps``!)       |
+                +------------------+-------------------------------------------------------------------------+
|                | ``args``         | Extra arguments for ``jsons.dumps``.                                    |
+                +------------------+-------------------------------------------------------------------------+
|                | ``kwargs``       | Keyword arguments that are passed on through the serialization process. |
+----------------+------------------+-------------------------------------------------------------------------+
| *Returns:*     | ``object``       | An object of a Python equivalent type or of ``cls``.                    |
+----------------+------------------+-------------------------------------------------------------------------+
| *Example:*     | ::                                                                                         |
|                |                                                                                            |
|                |     >>> jsons.dumps([1, 2, 3])                                                             |
|                |     '[1, 2, 3]'                                                                            |
+----------------+--------------------------------------------------------------------------------------------+

|
|
| **Function: loads**
|

+----------------+--------------------------------------------------------------------------------------------------------+
| *Function:*    | ``jsons.loads``                                                                                        |
+----------------+--------------------------------------------------------------------------------------------------------+
| *Description:* | Deserialize a given JSON string to a Python equivalent type or an instance of type ``cls`` (if given). |
+----------------+----------------------------+---------------------------------------------------------------------------+
| *Arguments:*   | ``str_: str``              | The string containing the JSON that is to be deserialized.                |
+                +----------------------------+---------------------------------------------------------------------------+
|                | ``cls: Optional[type]``    | A matching class of which an instance should be returned.                 |
+                +----------------------------+---------------------------------------------------------------------------+
|                | ``jdkwargs``               | Extra keyword arguments for ``json.loads`` (not ``jsons.loads``!).        |
+                +----------------------------+---------------------------------------------------------------------------+
|                | ``args``                   | Extra arguments for ``jsons.load``.                                       |
+                +----------------------------+---------------------------------------------------------------------------+
|                | ``kwargs``                 | Keyword arguments that are passed on through the deserialization process. |
+----------------+----------------------------+---------------------------------------------------------------------------+
| *Returns:*     | ``object``                 | An object of a Python equivalent type or of ``cls``.                      |
+----------------+----------------------------+---------------------------------------------------------------------------+
| *Example:*     | ::                                                                                                     |
|                |                                                                                                        |
|                |     >>> jsons.loads('[1, 2, 3]')                                                                       |
|                |     [1, 2, 3]                                                                                          |
+----------------+--------------------------------------------------------------------------------------------------------+

|
|
| **Function: dumpb**
|

+----------------+---------------------------------------------------------------------------------------------+
| *Function:*    | ``jsons.dumpb``                                                                             |
+----------------+---------------------------------------------------------------------------------------------+
| *Description:* | Serialize the given object to bytes that contain JSON.                                      |
+----------------+-------------------+-------------------------------------------------------------------------+
| *Arguments:*   | ``obj: object``   | The object that is to be serialized.                                    |
+                +-------------------+-------------------------------------------------------------------------+
|                | ``encoding: str`` | The encoding that is used to transform from bytes.                      |
+                +-------------------+-------------------------------------------------------------------------+
|                | ``jdkwargs``      | Extra keyword arguments for ``json.dumps`` (not ``jsons.dumps``!)       |
+                +-------------------+-------------------------------------------------------------------------+
|                | ``args``          | Extra arguments for ``jsons.dumps``.                                    |
+                +-------------------+-------------------------------------------------------------------------+
|                | ``kwargs``        | Keyword arguments that are passed on through the serialization process. |
+----------------+-------------------+-------------------------------------------------------------------------+
| *Returns:*     | ``bytes``         | A serialized ``obj`` in bytes.                                          |
+----------------+-------------------+-------------------------------------------------------------------------+
| *Example:*     | ::                                                                                          |
|                |                                                                                             |
|                |     >>> jsons.dumpb([1, 2, 3])                                                              |
|                |     b'[1, 2, 3]'                                                                            |
+----------------+---------------------------------------------------------------------------------------------+

|
|
| **Function: loadb**
|

+----------------+-----------------------------------------------------------------------------------------------------------------+
| *Function:*    | ``jsons.loadb``                                                                                                 |
+----------------+-----------------------------------------------------------------------------------------------------------------+
| *Description:* | Deserialize the given bytes holding JSON to a Python equivalent type or an instance of type ``cls`` (if given). |
+----------------+--------------------------------+--------------------------------------------------------------------------------+
| *Arguments:*   | ``bytes_: bytes``              | The bytes containing the JSON that is to be deserialized.                      |
+                +--------------------------------+--------------------------------------------------------------------------------+
|                | ``cls: Optional[type]``        | A matching class of which an instance should be returned.                      |
+                +--------------------------------+--------------------------------------------------------------------------------+
|                | ``encoding: str``              | The encoding that is used to transform from bytes.                             |
+                +--------------------------------+--------------------------------------------------------------------------------+
|                | ``jdkwargs``                   | Extra keyword arguments for ``json.loads`` (not ``jsons.loads``!)              |
+                +--------------------------------+--------------------------------------------------------------------------------+
|                | ``args``                       | Extra arguments for ``jsons.loads``.                                           |
+                +--------------------------------+--------------------------------------------------------------------------------+
|                | ``kwargs``                     | Keyword arguments that are passed on through the deserialization process.      |
+----------------+--------------------------------+--------------------------------------------------------------------------------+
| *Returns:*     | ``object``                     | An object of a Python equivalent type or of ``cls``.                           |
+----------------+--------------------------------+--------------------------------------------------------------------------------+
| *Example:*     | ::                                                                                                              |
|                |                                                                                                                 |
|                |     >>> jsons.loadb(b'[1, 2, 3]')                                                                               |
|                |     [1, 2, 3]                                                                                                   |
+----------------+-----------------------------------------------------------------------------------------------------------------+

|
|
| **Function: set_serializer**
|

+----------------+----------------------------------------------------------------------------------------------------+
| *Function:*    | ``jsons.set_serializer``                                                                           |
+----------------+----------------------------------------------------------------------------------------------------+
| *Description:* | Set a serializer function for the given type. The callable must accept                             |
|                | at least two arguments: the object to serialize and kwargs. It must                                |
|                | return an object that has a JSON equivalent type (e.g. dict, list, string, ...).                   |
|                |                                                                                                    |
+----------------+---------------------+------------------------------------------------------------------------------+
| *Arguments:*   | ``func: callable``  | The serializer function.                                                     |
+                +---------------------+------------------------------------------------------------------------------+
|                | ``cls: type``       | The type that ``func`` can serialize.                                        |
+                +---------------------+------------------------------------------------------------------------------+
|                | ``high_prio: bool`` | If ``True``, then ``func`` will take precedence over any other serializer    |
|                |                     | function that serializes ``cls``.                                            |
+                +---------------------+------------------------------------------------------------------------------+
|                | ``fork_inst``       | If given, it registers ``func`` to this fork of ``JsonSerializable``, rather |
|                |                     | than the global ``jsons``.                                                   |
+----------------+---------------------+------------------------------------------------------------------------------+
| *Returns:*     | ``None``            |                                                                              |
+----------------+---------------------+------------------------------------------------------------------------------+
| *Example:*     | ::                                                                                                 |
|                |                                                                                                    |
|                |     >>> jsons.set_serializer(lambda obj, **_: 123, str)                                            |
|                |     >>> jsons.dump("any string")                                                                   |
|                |     123                                                                                            |
+----------------+----------------------------------------------------------------------------------------------------+

|
|
| **Function: set_deserializer**
|

+----------------+----------------------------------------------------------------------------------------------------+
| *Function:*    | ``jsons.set_deserializer``                                                                         |
+----------------+----------------------------------------------------------------------------------------------------+
| *Description:* | Set a deserializer function for the given type. The callable must accept                           |
|                | at least three arguments: the object to deserialize, the type to deserialize                       |
|                | to and kwargs. It must return a deserialized object of type cls.                                   |
|                |                                                                                                    |
+----------------+---------------------+------------------------------------------------------------------------------+
| *Arguments:*   | ``func: callable``  | The deserializer function.                                                   |
+                +---------------------+------------------------------------------------------------------------------+
|                | ``cls: type``       | The type that ``func`` can deserialize.                                      |
+                +---------------------+------------------------------------------------------------------------------+
|                | ``high_prio: bool`` | If ``True``, then ``func`` will take precedence over any other deserializer  |
|                |                     | function that serializes ``cls``.                                            |
+                +---------------------+------------------------------------------------------------------------------+
|                | ``fork_inst``       | If given, it registers ``func`` to this fork of ``JsonSerializable``, rather |
|                |                     | than the global ``jsons``.                                                   |
+----------------+---------------------+------------------------------------------------------------------------------+
| *Returns:*     | ``None``            |                                                                              |
+----------------+---------------------+------------------------------------------------------------------------------+
| *Example:*     | ::                                                                                                 |
|                |                                                                                                    |
|                |     >>> jsons.set_deserializer(lambda obj, cls, **_: 123, str)                                     |
|                |     >>> jsons.load("any string")                                                                   |
|                |     123                                                                                            |
+----------------+----------------------------------------------------------------------------------------------------+

*******
Classes
*******



**********
Decorators
**********

| **Decorator: loaded**
|

+----------------+---------------------------------------------------------------------------------------------------------------+
| *Decorator:*   | ``jsons.decorators.loaded``                                                                                   |
+----------------+---------------------------------------------------------------------------------------------------------------+
| *Description:* | Call ``jsons.load`` on all parameters and on the return value of the                                          |
|                | decorated function/method.                                                                                    |
|                |                                                                                                               |
+----------------+---------------------------------+-----------------------------------------------------------------------------+
| *Arguments:*   | ``parameters: bool``            | When ``True``, parameters will be 'loaded'.                                 |
+                +---------------------------------+-----------------------------------------------------------------------------+
|                | ``returnvalue: bool``           | When ``True``, the return value is 'loaded' before it is actually returned. |
+                +---------------------------------+-----------------------------------------------------------------------------+
|                | ``fork_inst: JsonSerializable`` | If given, this fork of ``JsonSerializable`` is used to call                 |
|                |                                 | ``load`` on.                                                                |
+                +---------------------------------+-----------------------------------------------------------------------------+
|                | ``loader: callable``            | The load function which must be one of (``load``, ``loads``, ``loadb``).    |
|                +---------------------------------+-----------------------------------------------------------------------------+
|                | ``kwargs``                      | any keyword arguments that should be passed on to ``jsons.load``            |
+----------------+---------------------------------+-----------------------------------------------------------------------------+
| *Example:*     | ::                                                                                                            |
|                |                                                                                                               |
|                |     >>> @loaded()                                                                                             |
|                |     ... def func(arg: datetime) -> datetime:                                                                  |
|                |     ...     # arg is now of type datetime.                                                                    |
|                |     ...     return '2018-10-04T21:57:00Z'                                                                     |
|                |     >>> res = func('2018-10-04T21:57:00Z')                                                                    |
|                |     >>> type(res).__name__                                                                                    |
|                |     'datetime'                                                                                                |
+----------------+---------------------------------------------------------------------------------------------------------------+

|
|
| **Decorator: dumped**
|

+----------------+-----------------------------------------------------------------------------------------------------------------+
| *Decorator:*   | ``jsons.decorators.dumped``                                                                                     |
+----------------+-----------------------------------------------------------------------------------------------------------------+
| *Description:* | Call ``jsons.dump`` on all parameters and on the return value of the                                            |
|                | decorated function/method.                                                                                      |
|                |                                                                                                                 |
+----------------+----------------------------------+------------------------------------------------------------------------------+
| *Arguments:*   | ``parameters: bool``             | When ``True``, parameters will be 'dumped'.                                  |
+                +----------------------------------+------------------------------------------------------------------------------+
|                | ``returnvalue: bool``            | When ``True``, the return value is 'dumped' before it is actually returned.  |
+                +----------------------------------+------------------------------------------------------------------------------+
|                | ``fork_inst: JsonSerializable``  | If given, this fork of ``JsonSerializable`` is used to call                  |
|                |                                  | ``dump`` on.                                                                 |
+                +----------------------------------+------------------------------------------------------------------------------+
|                | ``dumper: callable``             | The dump function which must be one of (``dump``, ``dumps`` , ``dumpb``).    |
+                +----------------------------------+------------------------------------------------------------------------------+
|                | ``kwargs``                       | any keyword arguments that should be passed on to ``jsons.dump``             |
+----------------+----------------------------------+------------------------------------------------------------------------------+
| *Example:*     | ::                                                                                                              |
|                |                                                                                                                 |
|                |     >>> @dumped()                                                                                               |
|                |     ... def func(arg):                                                                                          |
|                |     ...     # arg is now of type str                                                                            |
|                |     ...     return datetime.now()                                                                               |
|                |     >>> res = func(datetime.now())                                                                              |
|                |     >>> type(res).__name__                                                                                      |
|                |     'str'                                                                                                       |
+----------------+-----------------------------------------------------------------------------------------------------------------+


***********
Serializers
***********

|
|
| **Function: jsons.default_iterable_serializer**
|

+----------------+----------------------------------------------------------------------------------------------+
| *Function:*    | ``jsons.default_iterable_serializer``                                                        |
+----------------+----------------------------------------------------------------------------------------------+
| *Description:* | Serialize the given ``obj`` to a list of serialized objects.                                 |
|                |                                                                                              |
+----------------+------------------+---------------------------------------------------------------------------+
| *Arguments:*   | ``obj: object``  | The iterable that is to be serialized.                                    |
+                +------------------+---------------------------------------------------------------------------+
|                | ``kwargs``       | Any keyword arguments that are passed through the serialization process.  |
+----------------+------------------+---------------------------------------------------------------------------+
| *Returns:*     | ``list``         | A list of which all elements are serialized.                              |
+----------------+------------------+---------------------------------------------------------------------------+
| *Example:*     | ::                                                                                           |
|                |                                                                                              |
|                |     >>> default_iterable_serializer((1, 2, 3))                                               |
|                |     [1, 2, 3]                                                                                |
+----------------+------------------------------------------------+---------------------------------------------+

|
|
| **Function: default_list_serializer**
|

+----------------+--------------------------------------------------------------------------------------------+
| *Function:*    | ``jsons.default_list_serializer``                                                          |
+----------------+--------------------------------------------------------------------------------------------+
| *Description:* | Serialize the given ``obj`` to a list of serialized objects.                               |
|                |                                                                                            |
+----------------+----------------+---------------------------------------------------------------------------+
| *Arguments:*   | ``obj: list``  | The list that is to be serialized.                                        |
+                +----------------+---------------------------------------------------------------------------+
|                | ``kwargs``     | Any keyword arguments that are passed through the serialization process.  |
+----------------+----------------+---------------------------------------------------------------------------+
| *Returns:*     | ``list``       | A list of which all elements are serialized.                              |
+----------------+----------------+---------------------------------------------------------------------------+
| *Example:*     | ::                                                                                         |
|                |                                                                                            |
|                |     >>> default_iterable_serializer([1, 2, datetime.now(tz=timezone.utc)])                 |
|                |     [1, 2, '2019-02-19T18:41:47Z']                                                         |
+----------------+--------------------------------------------------------------------------------------------+

|
|
| **Function: default_tuple_serializer**
|

+----------------+--------------------------------------------------------------------------------------------+
| Function:*     | ``jsons.default_tuple_serializer``                                                         |
+----------------+--------------------------------------------------------------------------------------------+
| *Description:* | Serialize the given ``obj`` to a list of serialized objects.                               |
|                |                                                                                            |
+----------------+----------------+---------------------------------------------------------------------------+
| *Arguments:*   | ``obj: tuple`` | The tuple that is to be serialized.                                       |
+                +----------------+---------------------------------------------------------------------------+
|                | ``kwargs``     | Any keyword arguments that are passed through the serialization process.  |
+----------------+----------------+---------------------------------------------------------------------------+
| *Returns:*     | ``list``       | A list of which all elements are serialized.                              |
+----------------+----------------+---------------------------------------------------------------------------+
| *Example:*     | ::                                                                                         |
|                |                                                                                            |
|                |     >>> default_iterable_serializer((1, 2, datetime.now(tz=timezone.utc)))                 |
|                |     [1, 2, '2019-02-19T18:41:47Z']                                                         |
+----------------+--------------------------------------------------------------------------------------------+

|
|
| **Function: default_dict_serializer**
|

+----------------+-----------------------------------------------------------------------------------------------------------------------+
| *Function:*    | ``jsons.default_dict_serializer``                                                                                     |
+----------------+-----------------------------------------------------------------------------------------------------------------------+
| *Description:* | Serialize the given ``obj`` to a dict of serialized objects.                                                          |
|                |                                                                                                                       |
+----------------+-----------------------------------------------------+-----------------------------------------------------------------+
| *Arguments:*   | ``obj: dict``                                       | The object that is to be serialized.                            |
+                +-----------------------------------------------------+-----------------------------------------------------------------+
|                | ``strip_nulls: bool``                               | When ``True``, the resulting dict won't contain 'null values'.  |
+                +-----------------------------------------------------+-----------------------------------------------------------------+
|                | ``key_transformer: Optional[Callable[[str], str]]`` | A function that will be applied to all keys in the              |
|                |                                                     | resuling dict.                                                  |
+                +-----------------------------------------------------+-----------------------------------------------------------------+
|                | ``kwargs``                                          | Any keyword arguments that are passed through the               |
|                |                                                     | serialization process.                                          |
+----------------+-----------------------------------------------------+-----------------------------------------------------------------+
| *Returns:*     | ``dict``                                            | A dict of which all elements are serialized.                    |
+----------------+-----------------------------------------------------+-----------------------------------------------------------------+
| *Example:*     | ::                                                                                                                    |
|                |                                                                                                                       |
|                |     >>> default_dict_serializer({'x': datetime.now()})                                                                |
|                |     {'x': '2019-02-23T13:46:10.650772+01:00'}                                                                         |
+----------------+-----------------------------------------------------------------------------------------------------------------------+

|
| **Function: default_enum_serializer**
|
|

+----------------+-----------------------------------------------------------------------------------------------------------+
| *Function:*    | ``jsons.default_enum_serializer``                                                                         |
+----------------+-----------------------------------------------------------------------------------------------------------+
| *Description:* | Serialize the given ``obj`` to a string. By default, the name of the                                      |
|                | enum element is returned.                                                                                 |
|                |                                                                                                           |
+----------------+-----------------------------------------------------+-----------------------------------------------------+
| *Arguments:*   | ``obj: EnumMeta``                                   | The object that is to be serialized.                |
+                +-----------------------------------------------------+-----------------------------------------------------+
|                | ``use_enum_name: bool``                             | When ``True``, the name of the enum type is used,   |
|                |                                                     | otherwise the value is used.                        |
+                +-----------------------------------------------------+-----------------------------------------------------+
|                | ``key_transformer: Optional[Callable[[str], str]]`` | A function that will be applied to all keys in the  |
|                |                                                     | resuling dict.                                      |
+----------------+-----------------------------------------------------+-----------------------------------------------------+
| *Returns:*     | ``str``                                             | A serialized ``obj`` in string format.              |
+----------------+-----------------------------------------------------+-----------------------------------------------------+
| *Example:*     | ::                                                                                                        |
|                |                                                                                                           |
|                |     >>> class Color(Enum):                                                                                |
|                |     ...     RED = 1                                                                                       |
|                |     ...     BLUE = 2                                                                                      |
|                |     >>> jsons.default_enum_serializer(Color.RED)                                                          |
|                |     'RED'                                                                                                 |
+----------------+-----------------------------------------------------------------------------------------------------------+

|
| **Function: default_primitive_serializer**
|
|

+----------------+---------------------------------------------------------------------------------------+
| *Function:*    | ``jsons.default_primitive_serializer``                                                |
+----------------+---------------------------------------------------------------------------------------+
| *Description:* | Serialize the given primitive. This function is just a placeholder; it simply returns |
|                | its parameter.                                                                        |
|                |                                                                                       |
+----------------+----------------------------------------+----------------------------------------------+
| *Arguments:*   | ``obj: object``                        | The primitive object.                        |
+----------------+----------------------------------------+----------------------------------------------+
| *Returns:*     | ``object``                             | ``obj``.                                     |
+----------------+----------------------------------------+----------------------------------------------+
| *Example:*     | ::                                                                                    |
|                |                                                                                       |
|                |     >>> jsons.default_primitive_serializer(42)                                        |
|                |     42                                                                                |
+----------------+---------------------------------------------------------------------------------------+

|
| **Function: default_object_serializer**
|
|

+----------------+--------------------------------------------------------------------------------------------------------+
| *Function:*    | ``jsons.default_object_serializer``                                                                    |
+----------------+--------------------------------------------------------------------------------------------------------+
| *Description:* | Serialize the given ``obj`` to a dict. All values within                                               |
|                | ``obj`` are serialized as well.                                                                        |
+----------------+-----------------------------------------------------+--------------------------------------------------+
| *Arguments:*   | ``obj: object``                                     | The object that is to be serialized.             |
+                +-----------------------------------------------------+--------------------------------------------------+
|                | ``key_transformer: Optional[Callable[[str], str]]`` | A function that will be applied to all keys in   |
|                |                                                     | the resulting dict.                              |
+                +-----------------------------------------------------+--------------------------------------------------+
|                | ``strip_nulls: bool``                               | If ``True`` the resulting dict will not contain  |
|                |                                                     | null values.                                     |
+                +-----------------------------------------------------+--------------------------------------------------+
|                | ``strip_privates: bool``                            | If ``True`` the resulting dict will not          |
|                |                                                     | contain private attributes (i.e. attributes      |
|                |                                                     | that start with an underscore).                  |
+                +-----------------------------------------------------+--------------------------------------------------+
|                | ``strip_properties: bool``                          | If ``True`` the resulting dict will not          |
|                |                                                     | contain values from @properties.                 |
+                +-----------------------------------------------------+--------------------------------------------------+
|                | ``kwargs``                                          | Any keyword arguments that may be given to the   |
|                |                                                     | serialization process.                           |
+----------------+-----------------------------------------------------+--------------------------------------------------+
| *Returns:*     | ``object``                                          | ``obj``.                                         |
+----------------+-----------------------------------------------------+--------------------------------------------------+
| *Example:*     | ::                                                                                                     |
|                |                                                                                                        |
|                |     >>> class Person:                                                                                  |
|                |     ...     def __init__(self, name: str, friends: Optional[List['Person']] = None):                   |
|                |     ...         self.name = name                                                                       |
|                |     ...         self.friends = friends                                                                 |
|                |     >>> p = Person('Harry', [Person('John')])                                                          |
|                |     >>> jsons.default_object_serializer(p)                                                             |
|                |     {'friends': [{'friends': None, 'name': 'John'}], 'name': 'Harry'}                                  |
+----------------+--------------------------------------------------------------------------------------------------------+

*************
Deserializers
*************

